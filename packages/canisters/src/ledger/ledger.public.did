type AccountBalanceArgs = record {
  account: AccountIdentifier;
};
type AccountIdentifier = text;
type ArchiveOptions = record {
  node_max_memory_size_bytes: opt nat32;
  max_message_size_bytes: opt nat32;
  controller_id: principal;
};
type CanisterId = principal;
type BlockHeight = nat64;
type Duration = record {
  secs: nat64;
  nanos: nat32;
};
type ICPTs = record {
  e8s : nat64;
};
type LedgerCanisterInitPayload = record {
  minting_account: AccountIdentifier;
  initial_values: vec record {AccountIdentifier; ICPTs};
  max_message_size_bytes: opt nat32;
  transaction_window: opt Duration;
  archive_options: opt ArchiveOptions;
  send_whitelist: vec record {principal};
};
type Memo = nat64;
type NotifyCanisterArgs = record {
  block_height: BlockHeight;
  max_fee: ICPTs;
  from_subaccount: opt SubAccount;
  to_canister: principal;
  to_subaccount: opt SubAccount;
};
type SendArgs = record {
  memo: Memo;
  amount: ICPTs;
  fee: ICPTs;
  from_subaccount: opt SubAccount;
  to: AccountIdentifier;
  created_at_time: opt TimeStamp;
};
type SubAccount = vec nat8;
type TimeStamp = record {
  timestamp_nanos: nat64;
};
type Transaction = record {
  transfer: Transfer;
  memo: Memo;
  created_at: BlockHeight;
};
type Transfer = variant {
  Burn: record {
    from: AccountIdentifier;
    amount: ICPTs;
  };
  Mint: record {
    to: AccountIdentifier;
    amount: ICPTs;
  };
  Send: record {
    from: AccountIdentifier;
    to: AccountIdentifier;
    amount: ICPTs;
  };
};
type HeaderField = record {text; text};
type HttpRequest = record {
  url: text;
  method: text;
  body: vec nat8;
  headers: vec HeaderField;
};
type HttpResponse = record {
  body: vec nat8;
  headers: vec HeaderField;
  status_code: nat16;
};

// Amount of tokens, measured in 10^-8 of a token.
type Tokens = record {
     e8s : nat64;
};

// AccountIdentifier is a 32-byte array.
// The first 4 bytes is big-endian encoding of a CRC32 checksum of the last 28 bytes.
type AccountIdentifierNew = blob;

// Sequence number of a block produced by the ledger.
type BlockIndex = nat64;

// Arguments for the `transfer` call.
type TransferArgs = record {
    // Transaction memo.
    // See comments for the `Memo` type.
    memo: Memo;
    // The amount that the caller wants to transfer to the destination address.
    amount: Tokens;
    // The amount that the caller pays for the transaction.
    // Must be 10000 e8s.
    fee: Tokens;
    // The subaccount from which the caller wants to transfer funds.
    // If null, the ledger uses the default (all zeros) subaccount to compute the source address.
    // See comments for the `SubAccount` type.
    from_subaccount: opt SubAccount;
    // The destination account.
    // If the transfer is successful, the balance of this address increases by `amount`.
    to: AccountIdentifierNew;
    // The point in time when the caller created this request.
    // If null, the ledger uses current IC time as the timestamp.
    created_at_time: opt TimeStamp;
};

type TransferError = variant {
    // The fee that the caller specified in the transfer request was not the one that ledger expects.
    // The caller can change the transfer fee to the `expected_fee` and retry the request.
    BadFee : record { expected_fee : Tokens; };
    // The account specified by the caller doesn't have enough funds.
    InsufficientFunds : record { balance: Tokens; };
    // The request is too old.
    // The ledger only accepts requests created within 24 hours window.
    // This is a non-recoverable error.
    TxTooOld : record { allowed_window_nanos: nat64 };
    // The caller specified `created_at_time` that is too far in future.
    // The caller can retry the request later.
    TxCreatedInFuture : null;
    // The ledger has already executed the request.
    // `duplicate_of` field is equal to the index of the block containing the original transaction.
    TxDuplicate : record { duplicate_of: BlockIndex; }
};

type TransferResult = variant {
    Ok : BlockIndex;
    Err : TransferError;
};

// Arguments for the `account_balance` call.
type AccountBalanceArgsNew = record {
    account: AccountIdentifierNew;
};


service: (LedgerCanisterInitPayload) -> {
  // Transfers tokens from a subaccount of the caller to the destination address.
  // The source address is computed from the principal of the caller and the specified subaccount.
  // When successful, returns the index of the block containing the transaction.
  transfer : (TransferArgs) -> (TransferResult);
   // Returns the amount of Tokens on the specified account.
  account_balance : (AccountBalanceArgsNew) -> (Tokens) query;
  send_dfx : (SendArgs) -> (BlockHeight);
  notify_dfx: (NotifyCanisterArgs) -> ();
  account_balance_dfx : (AccountBalanceArgs) -> (ICPTs) query;
  get_nodes : () -> (vec CanisterId) query;
  http_request: (HttpRequest) -> (HttpResponse) query;
}
