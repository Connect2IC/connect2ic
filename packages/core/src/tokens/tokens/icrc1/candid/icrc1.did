// Number of nanoseconds since the UNIX epoch in UTC timezone.
type Timestamp = nat64;

// Number of nanoseconds between two [Timestamp]service
type Duration = nat64;

type SubAccount = blob;

type TransferArgs = record {
    from_subaccount: opt SubAccount;
    to_principal: principal;
    to_subaccount: opt SubAccount;
    amount: nat;
    fee: opt nat;
    memo: opt nat64;
    created_at_time: opt Timestamp;
};

type TransferError = variant {
    BadFee : record { expected_fee : nat };
    BadBurn : record { min_burn_amount : nat };
    InsufficientFunds : record { balance : nat };
    TooOld : record { allowed_window_nanos : Duration };
    CreatedInFuture;
    Duplicate : record { duplicate_of : nat };
    GenericError: text;
};

type Value = variant {
    Nat : nat;
    Int : int;
    Text : text;
    Blob : blob;
};

service : {
    icrc1_metadata : () -> (vec record { text; Value; }) query;
    icrc1_name : () -> (text) query;
    icrc1_symbol : () -> (text) query;
    icrc1_decimals : () -> (nat8) query;
    icrc1_total_supply : () -> (nat) query;
    icrc1_balance_of : (record { of: principal; subaccount: opt SubAccount; }) -> (nat) query;
    icrc1_transfer : (TransferArgs) -> (variant { Ok: nat; Err: TransferError; });
    icrc1_supported_standards : () -> (vec record { name : text; url : text }) query;
}